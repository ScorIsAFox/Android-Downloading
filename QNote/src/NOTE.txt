sorrow is hushed into peace in my heart

like the evening among the silent trees.

忧思在我的心里平静下去，

正如暮色降临在寂静的山林中。






(a)
A NAND operation with 6 inputs needs 3 LEs as each LE has maximum 4 inputs. Therefore, for the 12- bit input, it needs 3 * 12 = 36 LEs in total.

(b)
The output Y is 3 bits. As the signal Y is assigned a value under the rising clock edge when Reset signal equals 0, it needs 3 registers. Therefore, the output Y needs 3 LEs in total.

(c)
Signal Y. This is because signal Y is under the conditional part and this part is specified as level detection.

(d)
The original code is:
          if (S = "00" ) then 
               Y <= A;
         elsif (S = "11" ) then 
               Y <= B;
         end if; 

Change this code to:
          if (S = "00" ) then 
               Y <= A;
         elsif (S = "11" ) then 
               Y <= B;
         else
               Y <= "XXX";
         end if; 

--------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;

entity counter is
  port (Clk, Reset, Enable : in std_logic;
        Q : out std_logic_vector(4 downto 0));
end entity counter;

architecture behaviour of counter is
begin
  process(Clk)
    variable v_Q :std_logic_vector(4 downto 0);
  begin
    if (rising_edge(Clk)) then
      if (Reset = '1') then
        v_Q := "11111";
      elsif (Enable = '1') then
        if (v_Q = "11111") then
          v_Q := "01101";
        elsif (v_Q = "01101") then
          v_Q := "11000";
        elsif (v_Q = "11000") then
          v_Q := "00000";
        elsif (v_Q = "00000") then
          v_Q := "10101";
        elsif (v_Q = "10101") then
          v_Q := "11111";
        end if; 
      end if;
      Q <= v_Q;
    end if;
  end process;
end architecture behaviour;

--------------------------------
entity W_Gen is
  port (X : int bit;
        A, B, C : out bit);
end entity W_Gen;

architecture a1 of W_Gen is
  signal A1, B1 : bit;
begin
  process
  begin
    A1 <= '0', '1' after 3 ns, '0' after 6 ns, '1' after 9 ns, '0' after 12 ns;
    B1 <= '1', '0' after 6 ns, '1' after 12 ns;
    wait for 15 ns;
  end process;
  A <= A1;
  B <= B1;
  C <= A1 xor B1 when X = '1' else '0';
end architecture a1;

---------------------------------------
Mem1, Mem2: 64*128*9-bit
Mem3, Mem4: 64*128*6-bit
Mem5: pre-store
(a)
The depth and width of Mem1 and Mem2 are 8192 and 9 bits.
The depth and width of Mem3 and Mem4 are 8192 and 6 bits.
Mem1 and Mem2 need 8 M9K memory blocks, respectively.
Mem3 and Mem4 need 6 M9K memory blocks, respectively.
In total, there are 8*2 + 6*2 = 28 M9K memory blocks needed.

(b)
Mem1 and Mem2 : Simple Dual-port
This is because Mem1 and Mem2 needs to be written and read simultaneously, but it does not need to do two reads or two writes.

Mem3 and Mem4: Simple Dual-port.
This is because Mem3 and Mem4 also needs simultaneous read and write operations.

Mem5: ROM
As it has initial data (stored in .mif file), the type of memory should be ROM.

(c)
Mem1 and Mem2: Read/Write Clock Mode
This mode is used for simple dual-port memories and the data needs to be read and written at different clock frequencies.

Mem3 and Mem4: Read/Write Clock Mode
As mentioned above, Mem3 and Mem4 also needs to read and write the data at the same time. Therefore, the Read/Write Clock Mode should be used for simple dual-port memories and the data needs to be read and written at different clock frequencies.

Mem5: Single-clock Mode
Data stores in the .mif file just needs to be read. Therefore, single-clock mode is useful.

(d)
Using on board PLL’s:  f_out = M/N * f_clk
Note: f_clk = 50MHz

To generate 125 MHz, f_out = 125 MHz
                                    125 = M/N * 50
                                    M/N = 2.5
                                    M=5, N=2

To generate 200 MHz, f_out = 200 MHz
                                    200 = M/N * 50
                                    M/N = 4
                                    M=4, N=1
To generate 33.33 MHz 33.33 = M/N * 50, -> M/N = 2/3 -> M=2, N=3.



